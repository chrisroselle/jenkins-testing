@Library('cr-common') _

pipeline {
    agent any
    
    parameters {
        choice(name: 'example', description: p.example.description, choices: p.example.choices)
    }
    
    stages {
        stage('CR') {
            steps {
                echo "running parent with example = '${example}'"
                script {
                    def jobs = [:]
                    def job_results = [:]
                    for (v in p.example2.choices) {
                        jobs[v] = {
                            job_results[v] = [:]
                            job_results[v]['child1'] = build job: 'child1', parameters: [
                                string(name: 'example', value: example),
                                string(name: 'example2', value: v)
                            ]
                            job_results[v]['child2'] = build job: 'child2', parameters: [
                                string(name: 'example', value: example),
                                string(name: 'example2', value: v)
                            ]
                        }
                    }
                    parallel jobs
                    job_results.each { k1, m1 ->
                        m1.each { k2, v2 ->
                            def log = cr_common.getLog(v2, 100)
                            def hit = false
                            echo "${k2}(${k1}):"
                            for (line in log) {
                                if (line.contains('interesting')) {
                                    hit = true
                                    echo line
                                }
                            }
                            if (!hit) {
                                echo "--- no interesting log lines found ---"
                            }
                        }
                    }
                }
            }
        }
    }
    
    options {
        buildDiscarder(
            logRotator(
                //numToKeepStr: '30',
                daysToKeepStr: '30'
            )
        )
    }
}